
Directory: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\components


Directory: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\lib


Directory: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\styles


File: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\App.jsx

import React from 'react';
import { UserSettingsProvider } from './components/UserContext';
import { ActivityProvider } from './components/ActivityContext';
import { CharacterSettingsDialog } from './components/CharacterSettingsDialog';
import { ActivityList } from './components/ActivityList';
import { CreateActivityButton } from './components/CreateActivityButton';
import { GenerateTimelineButton } from './components/GenerateTimelineButton';
import { GenerateQuestionsButton } from './components/GenerateQuestionsButton';

// Main App component
const App = () => {
  return (
    <UserSettingsProvider>
      <ActivityProvider>
        <div className="min-h-screen bg-gray-100 p-4">
          <div className="fixed top-4 right-4 flex gap-2">
            <CharacterSettingsDialog />
            <GenerateTimelineButton />
            <GenerateQuestionsButton />
          </div>
          <div className="mt-16">
            <CreateActivityButton />
            <ActivityList />
          </div>
        </div>
      </ActivityProvider>
    </UserSettingsProvider>
  );
};

export default App;

File: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\index.css

@import './styles/globals.css';

File: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\main.jsx

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

Directory: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\components\ui


File: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\components\ActivityContext.jsx

import React, { createContext, useContext, useState, useEffect } from 'react';
import { useUserSettings } from './UserContext';

const ActivityContext = createContext();

export const useActivities = () => {
  const context = useContext(ActivityContext);
  if (!context) throw new Error('useActivities must be used within an ActivityProvider');
  return context;
};

export const ActivityProvider = ({ children }) => {
  const [activities, setActivities] = useState(() => {
    const savedActivities = localStorage.getItem('activities');
    return savedActivities ? JSON.parse(savedActivities) : [];
  });

  // Save activities to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem('activities', JSON.stringify(activities));
  }, [activities]);

  const addActivity = (activity) => {
    setActivities(prev => [...prev, {
      id: Date.now().toString(),
      ...activity,
      createdAt: new Date().toISOString()
    }]);
  };

  const updateActivity = (id, updates) => {
    setActivities(prev => 
      prev.map(activity => 
        activity.id === id ? { ...activity, ...updates } : activity
      )
    );
  };

  const deleteActivity = (id) => {
    setActivities(prev => prev.filter(activity => activity.id !== id));
  };

  const clearActivities = () => {
    setActivities([]);
  };

  return (
    <ActivityContext.Provider 
      value={{ 
        activities,
        addActivity,
        updateActivity,
        deleteActivity,
        clearActivities
      }}
    >
      {children}
    </ActivityContext.Provider>
  );
};

File: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\components\ActivityList.jsx

import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Trash2, Edit } from 'lucide-react';
import { useActivities } from './ActivityContext';

export const ActivityList = () => {
  const { activities, deleteActivity } = useActivities();

  if (activities.length === 0) {
    return (
      <div className="mt-8 text-center text-gray-500">
        아직 기록된 활동이 없습니다.
      </div>
    );
  }

  return (
    <div className="mt-8 space-y-4">
      {activities.map((activity) => (
        <Card key={activity.id}>
          <CardContent className="p-4">
            <div className="flex justify-between items-start">
              <div>
                <h3 className="font-semibold">{activity.title}</h3>
                <p className="text-sm text-gray-600">
                  {activity.startTime} - {activity.endTime}
                </p>
              </div>
              <div className="flex gap-2">
                <Button variant="ghost" size="icon" onClick={() => {/* TODO: Edit */}}>
                  <Edit className="h-4 w-4" />
                </Button>
                <Button 
                  variant="ghost" 
                  size="icon"
                  onClick={() => deleteActivity(activity.id)}
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </div>
            {activity.thoughts && (
              <div className="mt-2 text-sm bg-gray-50 p-2 rounded">
                {activity.thoughts}
              </div>
            )}
          </CardContent>
        </Card>
      ))}
    </div>
  );
};

File: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\components\CharacterSettingsDialog.jsx

import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { User } from 'lucide-react';
import { useUserSettings } from './UserContext'; // 수정된 임포트
import { api } from '@/lib/api';

export const CharacterSettingsDialog = () => {
  const { settings, updateSettings } = useUserSettings();
  const [localSettings, setLocalSettings] = useState(settings);
  const [activeTab, setActiveTab] = useState('character'); // 'character' or 'notion'
  
  const MBTI_TYPES = [
    'INTJ', 'INTP', 'ENTJ', 'ENTP',
    'INFJ', 'INFP', 'ENFJ', 'ENFP',
    'ISTJ', 'ISFJ', 'ESTJ', 'ESFJ',
    'ISTP', 'ISFP', 'ESTP', 'ESFP'
  ];

  useEffect(() => {
    setLocalSettings(settings);
  }, [settings]);

  const handleSave = async () => {
    try {
      if (!localSettings.characterName || !localSettings.mbti) {
        alert('캐릭터 이름과 MBTI는 필수입니다.');
        return;
      }
      if (!localSettings.notionApiKey || !localSettings.notionPageUrl) {
        alert('Notion API Key와 Page URL은 필수입니다.');
        return;
      }

      const response = await api.createCharacter(localSettings);
      updateSettings(localSettings);
      alert('설정이 저장되었습니다.');
    } catch (error) {
      console.error('Error:', error);
      alert('설정 저장에 실패했습니다.');
    }
  };

  const renderCharacterTab = () => (
    <div className="space-y-4">
      <div className="grid gap-2">
        <label>Character Name (ID)</label>
        <input 
          type="text"
          className="border p-2 rounded"
          value={localSettings.characterName || ''}
          onChange={(e) => setLocalSettings({ ...localSettings, characterName: e.target.value })}
        />
      </div>
      <div className="grid gap-2">
        <label>MBTI</label>
        <select 
          className="border p-2 rounded"
          value={localSettings.mbti || ''}
          onChange={(e) => setLocalSettings({ ...localSettings, mbti: e.target.value })}
        >
          <option value="">Select MBTI</option>
          {MBTI_TYPES.map(type => (
            <option key={type} value={type}>{type}</option>
          ))}
        </select>
      </div>
      <div className="grid gap-2">
        <label>Goals</label>
        <textarea
          className="border p-2 rounded min-h-[80px]"
          value={localSettings.goals || ''}
          onChange={(e) => setLocalSettings({ ...localSettings, goals: e.target.value })}
          placeholder="What are your goals?"
        />
      </div>
      <div className="grid gap-2">
        <label>Preferences</label>
        <textarea
          className="border p-2 rounded min-h-[80px]"
          value={localSettings.preferences || ''}
          onChange={(e) => setLocalSettings({ ...localSettings, preferences: e.target.value })}
          placeholder="What are your preferences?"
        />
      </div>
    </div>
  );

  const renderNotionTab = () => (
    <div className="space-y-4">
      <div className="grid gap-2">
        <label>Notion API Key</label>
        <input 
          type="password"
          className="border p-2 rounded"
          value={localSettings.notionApiKey || ''}
          onChange={(e) => setLocalSettings({ ...localSettings, notionApiKey: e.target.value })}
        />
      </div>
      <div className="grid gap-2">
        <label>Notion Page URL</label>
        <input 
          type="text"
          className="border p-2 rounded"
          value={localSettings.notionPageUrl || ''}
          onChange={(e) => setLocalSettings({ ...localSettings, notionPageUrl: e.target.value })}
        />
      </div>
    </div>
  );

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="ghost" size="icon" className="fixed top-4 left-4">
          <User className="h-6 w-6" />
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-[90vw] sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>Character Settings</DialogTitle>
        </DialogHeader>
        <div className="flex space-x-4 border-b mb-4">
          <button
            className={`py-2 px-4 ${activeTab === 'character' ? 'border-b-2 border-blue-500' : ''}`}
            onClick={() => setActiveTab('character')}
          >
            Character
          </button>
          <button
            className={`py-2 px-4 ${activeTab === 'notion' ? 'border-b-2 border-blue-500' : ''}`}
            onClick={() => setActiveTab('notion')}
          >
            Notion Settings
          </button>
        </div>
        {activeTab === 'character' ? renderCharacterTab() : renderNotionTab()}
        <Button onClick={handleSave} className="mt-4">Save All Settings</Button>
      </DialogContent>
    </Dialog>
  );
};

export default CharacterSettingsDialog;

File: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\components\CreateActivityButton.jsx

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { useActivities } from './ActivityContext';
import { Plus } from 'lucide-react';

const getCurrentTime = () => {
  const now = new Date();
  return `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
};

export const CreateActivityButton = () => {
  const [isOpen, setIsOpen] = useState(false);
  const { addActivity } = useActivities();
  const [activityData, setActivityData] = useState({
    title: '',
    startTime: '',
    endTime: getCurrentTime(),
    thoughts: ''
  });

  const handleDialogOpen = (open) => {
    if (open) {
      // 다이얼로그가 열릴 때마다 endTime을 현재 시간으로 업데이트
      setActivityData(prev => ({
        ...prev,
        endTime: getCurrentTime()
      }));
    }
    setIsOpen(open);
  };

  const handleSubmit = () => {
    if (!activityData.title || !activityData.startTime || !activityData.endTime) {
      alert('활동명과 시간을 모두 입력해주세요.');
      return;
    }

    // 시간 유효성 검사
    const [startHour, startMinute] = activityData.startTime.split(':').map(Number);
    const [endHour, endMinute] = activityData.endTime.split(':').map(Number);
    const startTotal = startHour * 60 + startMinute;
    const endTotal = endHour * 60 + endMinute;

    if (startTotal >= endTotal) {
      alert('시작 시간은 종료 시간보다 이전이어야 합니다.');
      return;
    }

    addActivity(activityData);
    setActivityData({
      title: '',
      startTime: '',
      endTime: getCurrentTime(),
      thoughts: ''
    });
    setIsOpen(false);
  };

  return (
    <>
      <Button 
        onClick={() => handleDialogOpen(true)}
        className="w-full flex items-center gap-2"
      >
        <Plus className="w-4 h-4" />
        활동 추가하기
      </Button>

      <Dialog open={isOpen} onOpenChange={handleDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>새로운 활동 기록</DialogTitle>
          </DialogHeader>
          
          <div className="grid gap-4 py-4">
            <div>
              <label className="block text-sm font-medium mb-1">활동명</label>
              <input
                type="text"
                className="w-full p-2 border rounded"
                value={activityData.title}
                onChange={(e) => setActivityData(prev => ({ ...prev, title: e.target.value }))}
                placeholder="어떤 활동을 하셨나요?"
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">시작 시간</label>
                <input
                  type="time"
                  className="w-full p-2 border rounded"
                  value={activityData.startTime}
                  onChange={(e) => setActivityData(prev => ({ ...prev, startTime: e.target.value }))}
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">종료 시간</label>
                <input
                  type="time"
                  className="w-full p-2 border rounded"
                  value={activityData.endTime}
                  onChange={(e) => setActivityData(prev => ({ ...prev, endTime: e.target.value }))}
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">생각 / 감정</label>
              <textarea
                className="w-full p-2 border rounded min-h-[100px]"
                value={activityData.thoughts}
                onChange={(e) => setActivityData(prev => ({ ...prev, thoughts: e.target.value }))}
                placeholder="활동 중에 어떤 생각이나 감정이 들었나요?"
              />
            </div>

            <div className="flex justify-end gap-2">
              <Button variant="outline" onClick={() => handleDialogOpen(false)}>
                취소
              </Button>
              <Button onClick={handleSubmit}>
                추가하기
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
};

File: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\components\GenerateQuestionsButton.jsx

import React from 'react';
import { Button } from '@/components/ui/button';
import { HelpCircle, Loader2 } from 'lucide-react';
import { useUserSettings } from './UserContext';
import { api } from '@/lib/api';

export const GenerateQuestionsButton = () => {
  const { settings } = useUserSettings();
  const [isGenerating, setIsGenerating] = React.useState(false);

  const handleGenerateQuestions = async () => {
    if (!settings.characterName) {
      alert('설정에서 캐릭터 이름을 먼저 설정해주세요.');
      return;
    }

    try {
      setIsGenerating(true);
      const result = await api.generateQuestions(settings.characterName);
      
      if (result.notionPageUrl) {
        const shouldOpen = confirm('성찰 질문이 생성되었습니다. 노션 페이지를 여시겠습니까?');
        if (shouldOpen) {
          window.open(result.notionPageUrl, '_blank');
        }
      }
    } catch (error) {
      console.error('Error generating questions:', error);
      alert('질문 생성에 실패했습니다.');
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Button
      variant="ghost"
      size="icon"
      onClick={handleGenerateQuestions}
      disabled={isGenerating}
    >
      {isGenerating ? (
        <Loader2 className="h-6 w-6 animate-spin" />
      ) : (
        <HelpCircle className="h-6 w-6" />
      )}
    </Button>
  );
};

File: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\components\GenerateTimelineButton.jsx

import React from 'react';
import { Button } from '@/components/ui/button';
import { BookOpen, Loader2 } from 'lucide-react';
import { useActivities } from './ActivityContext';
import { useUserSettings } from './UserContext';
import { api } from '@/lib/api';

export const GenerateTimelineButton = () => {
  const { activities, clearActivities } = useActivities();
  const { settings } = useUserSettings();
  const [isGenerating, setIsGenerating] = React.useState(false);

  const handleGenerateTimeline = async () => {
    if (activities.length === 0) {
      alert('기록된 활동이 없습니다.');
      return;
    }

    if (!settings.characterName) {
      alert('설정에서 캐릭터 이름을 먼저 설정해주세요.');
      return;
    }

    try {
      setIsGenerating(true);
      const result = await api.generateTimeline(settings.characterName, activities);
      
      if (result.notionPageUrl) {
        const shouldOpen = confirm('타임라인이 생성되었습니다. 노션 페이지를 여시겠습니까?');
        if (shouldOpen) {
          window.open(result.notionPageUrl, '_blank');
        }
      }
      
      clearActivities(); // 활동 목록 초기화
    } catch (error) {
      console.error('Error generating timeline:', error);
      alert('타임라인 생성에 실패했습니다.');
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Button
      variant="ghost"
      size="icon"
      onClick={handleGenerateTimeline}
      disabled={isGenerating}
    >
      {isGenerating ? (
        <Loader2 className="h-6 w-6 animate-spin" />
      ) : (
        <BookOpen className="h-6 w-6" />
      )}
    </Button>
  );
};

File: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\components\UserContext.jsx

import React, { createContext, useContext, useState, useEffect } from 'react';

const UserContext = createContext();

export const useUserSettings = () => {
  const context = useContext(UserContext);
  if (!context) throw new Error('useUserSettings must be used within a UserSettingsProvider');
  return context;
};

export const UserSettingsProvider = ({ children }) => {
  const [settings, setSettings] = useState({
    notionApiKey: '',
    notionPageUrl: '',
    characterName: '',
    mbti: '',
    goals: '',
    preferences: ''
  });

  useEffect(() => {
    const savedSettings = localStorage.getItem('userSettings');
    if (savedSettings) {
      setSettings(JSON.parse(savedSettings));
    }
  }, []);

  const updateSettings = (newSettings) => {
    const updatedSettings = { ...settings, ...newSettings };
    setSettings(updatedSettings);
    localStorage.setItem('userSettings', JSON.stringify(updatedSettings));
  };

  return (
    <UserContext.Provider value={{ settings, updateSettings }}>
      {children}
    </UserContext.Provider>
  );
};

File: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\components\ui\button.jsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cn } from "@/lib/utils"
 
const Button = React.forwardRef(({ className, variant = "default", size = "default", asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    <Comp
      className={cn(
        "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
        {
          "bg-primary text-primary-foreground hover:bg-primary/90": variant === "default",
          "bg-destructive text-destructive-foreground hover:bg-destructive/90": variant === "destructive",
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground": variant === "outline",
          "bg-secondary text-secondary-foreground hover:bg-secondary/80": variant === "secondary",
          "bg-transparent hover:bg-accent hover:text-accent-foreground": variant === "ghost",
          "hover:bg-accent hover:text-accent-foreground": variant === "link",
        },
        {
          "h-10 px-4 py-2": size === "default",
          "h-9 rounded-md px-3": size === "sm",
          "h-11 rounded-md px-8": size === "lg",
          "h-9 w-9": size === "icon",
        },
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Button.displayName = "Button"

export { Button }

File: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\components\ui\card.jsx

import * as React from "react"
import { cn } from "@/lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("text-2xl font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

File: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\components\ui\dialog.jsx

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"
import { cn } from "@/lib/utils"
 
const Dialog = DialogPrimitive.Root
 
const DialogTrigger = DialogPrimitive.Trigger
 
const DialogPortal = DialogPrimitive.Portal
 
const DialogClose = DialogPrimitive.Close
 
const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName
 
const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName
 
const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"
 
const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"
 
const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName
 
const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName
 
export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

File: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\lib\api.js

const API_URL = import.meta.env.VITE_API_URL;

export const api = {
  createCharacter: async (settings) => {
    const response = await fetch(`${API_URL}/character/create`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(settings)
    });
    if (!response.ok) throw new Error('Failed to create character');
    return response.json();
  },

  generateTimeline: async (characterName, activities) => {
    const response = await fetch(`${API_URL}/timeline/generate/${encodeURIComponent(characterName)}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ activities })
    });
    if (!response.ok) throw new Error('Failed to generate timeline');
    return response.json();
  },

  generateQuestions: async (characterName) => {
    const response = await fetch(`${API_URL}/questions/generate/${encodeURIComponent(characterName)}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    if (!response.ok) throw new Error('Failed to generate questions');
    return response.json();
  },

  updateCharacter: async (characterName, characterData) => {
    const response = await fetch(`${API_URL}/character/update/${encodeURIComponent(characterName)}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(characterData)
    });
    if (!response.ok) throw new Error('Failed to update character');
    return response.json();
  }
};

File: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\lib\utils.js

import { clsx } from "clsx"
import { twMerge } from "tailwind-merge"
 
export function cn(...inputs) {
  return twMerge(clsx(inputs))
}

File: C:\Users\사용자\Desktop\2024\25_1분기\Ai Agent\quest-app\src\styles\globals.css

@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
 
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
 
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
 
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
 
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
 
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
 
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
 
    --radius: 0.5rem;
  }
}
 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
